---
import { parse } from "ultrahtml";
import { querySelectorAll } from "ultrahtml/selector";
import { dset } from "dset";
interface Props {
  href: string;
}
const { href } = Astro.props;

const text = await fetch(href).then((res) => res.text());
const html = await parse(text);
const og = querySelectorAll(html, 'meta[property^="og:"]').reduce(
  (acc, meta) => {
    const { property, content: value } = meta.attributes;
    const key = property.replace("og:", "");
    dset(acc, key === "image" ? "image.src" : key.replace(/\:/g, "."), value);
    return acc;
  },
  {} as Record<string, any>
);
const {
  image: { src, width = "1200", height = "630", alt },
} = og;
---

<a target="_blank" href={href} class:list={{ card: true }}>
  {
    og.image && (
      <span class="img">
        <img {...{ src, width, height, alt }} loading="lazy" />
      </span>
    )
  }
  <span class="footer">
    <span class="href">{new URL(href).origin.replace(/^https?\:\/\//, "")}</span
    >
    <span class="site_name">{og.site_name}</span>
    <span class="description">{og.description}</span>
  </span>
</a>

<style>
  .card {
    margin-top: 0.5rem;
    max-width: 100%;
    border-radius: 1rem;
    overflow: hidden;
    border: 1px solid var(--color-border);
    text-decoration: none;
    color: inherit;
  }
  .img {
    overflow: hidden;
    aspect-ratio: 1200 / 630;
    width: 100%;
    background: white;
  }
  .img > img {
    width: 100%;
    height: auto;
  }
  .footer {
    display: flex;
    flex-direction: column;
    padding: 0.5rem 1rem;
    transition: background 200ms cubic-bezier(0.23, 1, 0.32, 1);
  }
  .site_name {
    font-weight: 700;
  }
  .href,
  .description {
    font-size: 0.9rem;
    color: var(--color-muted);
  }
  .card:is(:hover, :focus) .footer {
    background: var(--color-border);
  }
</style>
